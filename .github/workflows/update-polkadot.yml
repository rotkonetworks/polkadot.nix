name: Update Polkadot Nix Package

on:
  workflow_dispatch: # Allow manual triggering
  schedule:
    - cron: "0 */4 * * *" # Runs every 4 hours

jobs:
  update-polkadot:
    name: Update Polkadot Nix Package
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Nix
        uses: cachix/install-nix-action@v22

      - name: Fetch latest stable release
        id: fetch_version
        run: |
          API_URL="https://api.github.com/repos/paritytech/polkadot-sdk/releases?per_page=100"

          # TAG=$(curl -s "$API_URL" | jq -r '
          #   map(select(.tag_name | test("^polkadot-stable[0-9]{4}(-[0-9]+)?$")))
          #   | map(.tag_name)
          #   | map({
          #       tag: .,
          #       base: (capture("polkadot-stable(?<base>[0-9]{4})").base | tonumber),
          #       patch: (
          #         if test("-[0-9]+$") then
          #           (capture("-(?<patch>[0-9]+)$").patch | tonumber)
          #         else
          #           0
          #         end
          #       )
          #     })
          #   | sort_by(.base, .patch)
          #   | reverse
          #   | .[0].tag
          # ')

          # include rc tags tmp
          TAG=$(curl -s "$API_URL" | jq -r '
            map(select(.tag_name | test("^polkadot-stable[0-9]{4}(-[0-9]+)?(-rc[0-9]+)?$")))
            | sort_by(
                .tag_name | capture("polkadot-stable(?<base>[0-9]{4})(?:-(?<patch>[0-9]+))?(?:-rc(?<rc>[0-9]+))?") |
                [(.base | tonumber), (.patch // "0" | tonumber), if .rc then 0 else 1 end, (.rc // "0" | tonumber) * -1]
              )
            | reverse | .[0].tag_name
          ')

          if [[ -z "$TAG" ]]; then
            echo "No stable release found. Exiting."
            exit 1
          fi

          VERSION=${TAG#"polkadot-stable"}
          echo "Latest version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Update version in generic.nix
        run: |
          set -euo pipefail
          FILE="pkgs/polkadot-sdk/generic.nix"
          VERSION="${{ env.VERSION }}"

          if [ ! -f "$FILE" ]; then
            echo "Error: $FILE does not exist" && exit 1
          fi

          CURRENT_VERSION=$(grep -oP 'version = "\K[^"]+' "$FILE")
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $VERSION"

          if [ "$CURRENT_VERSION" = "$VERSION" ]; then
            echo "Version $VERSION is already current. No update needed."
            echo "skip=true" >> "$GITHUB_ENV"
            exit 0
          fi

          # Update version and set placeholder hash for later replacement
          sed -i "s|version = \".*\";|version = \"$VERSION\";|" "$FILE"
          sed -i 's|hash = "sha256-[^"]*";|hash = "sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";|' "$FILE"
          echo "skip=false" >> "$GITHUB_ENV"

      - name: Check flake to find correct hash
        if: env.skip == 'false'
        id: get_correct_hash
        run: |
          set -euo pipefail
          OUTPUT=$(nix flake check --extra-experimental-features nix-command --extra-experimental-features flakes 2>&1 | tee build.log || true)
          # Look for the correct hash within the output
          HASH=$(grep -oP 'got:\s*sha256-\K[a-zA-Z0-9+/=]+' build.log | head -n1)
          if [[ -z "$HASH" ]]; then
            echo "Error: Could not extract hash from log" && exit 1
          fi
          echo "Found corrected hash: $HASH"
          echo "HASH=$HASH" >> "$GITHUB_ENV"

      - name: Update Nix file with correct hash
        if: env.skip == 'false'
        run: |
          set -euo pipefail
          FILE="pkgs/polkadot-sdk/generic.nix"
          HASH="${{ env.HASH }}"
          sed -i "s|hash = \"sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";|hash = \"sha256-$HASH\";|" "$FILE"
          echo "Updated hash in $FILE"

      - name: Get correct cargoHash
        if: env.skip == 'false'
        id: get_cargo_hash
        run: |
          set -euo pipefail
          FILE="pkgs/polkadot-sdk/generic.nix"
          # Introduce a bogus cargoHash to force a hash mismatch error and reveal the correct value
          sed -i 's|cargoHash = "sha256-[^"]*"|cargoHash = "sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"|' "$FILE"
          OUTPUT=$(nix build .#polkadot --extra-experimental-features nix-command --extra-experimental-features flakes 2>&1 | tee cargo.log || true)
          echo "Cargo build output:" && cat cargo.log
          CARGO_HASH=$(grep -oP 'got:\s*sha256-\K[a-zA-Z0-9+/=]+' cargo.log | head -n1)
          if [[ -z "$CARGO_HASH" ]]; then
            echo "Error: Failed to extract cargoHash" && exit 1
          fi
          echo "CARGO_HASH=$CARGO_HASH" >> "$GITHUB_ENV"

      - name: Update Nix file with correct cargoHash
        if: env.skip == 'false'
        run: |
          set -euo pipefail
          FILE="pkgs/polkadot-sdk/generic.nix"
          CARGO_HASH="${{ env.CARGO_HASH }}"
          sed -i "s|cargoHash = \"sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";|cargoHash = \"sha256-$CARGO_HASH\";|" "$FILE"
          echo "Updated cargoHash in $FILE"

      - name: Commit and push changes
        if: env.skip == 'false'
        run: |
          set -euo pipefail
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add pkgs/polkadot-sdk/generic.nix
          git commit -m "chore: update Polkadot to latest stable release ${{ env.VERSION }}"
          git push

      - name: Skip Message
        if: env.skip == 'true'
        run: echo "No update needed. Workflow exiting gracefully."
